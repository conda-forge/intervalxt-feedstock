{% set name = "intervalxt" %}
{% set version = "3.3.4" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/flatsurf/{{ name }}/releases/download/{{ version }}/{{ name }}-{{ version }}.tar.gz
  sha256: 7596a14af8e35165259220747eeeec822aeffe7ea3760ef891262d24999a5710

build:
  number: 1
  # dependency libeantic is not available for Windows on conda-forge yet
  skip: true  # [win]

outputs:
  - name: libintervalxt
    script: build-libintervalxt.sh  # [not win]
    script: build-libintervalxt.bat  # [win]
    run_exports:
      - {{ pin_subpackage("libintervalxt") }}
    requirements:
      build:
        - libtool    # [unix]
        - automake   # [unix]
        - make       # [unix]
        - gnuconfig  # [unix]
        - autotools_clang_conda  # [win]
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
      host:
        # We only need the libboost-headers at compile time. However, since we
        # use bits of boost in our API, code built against libintervalxt must be
        # built with a compatible version of the headers. Therefore, we add a
        # liboost pin to our run exports so libbookst-headers are going to be
        # in a compatible version.
        - libboost-devel
        - fmt
        - gmp   # [unix]
        - mpir  # [win]
        - ppl
    test:
      commands:
        - test -f $PREFIX/include/intervalxt/intervalxt.hpp  # [unix]
        - test -f $PREFIX/lib/libintervalxt${SHLIB_EXT}      # [unix]
  - name: pyintervalxt
    script: build-pyintervalxt.sh  # [not win]
    script: bld-pyintervalxt.bat  # [win]
    requirements:
      build:
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
        - libtool   # [unix]
        - automake  # [unix]
        - make      # [unix]
        - autotools_clang_conda  # [win]
        - gnuconfig  # [unix]
        - {{ compiler('cxx') }}
        - {{ stdlib("c") }}
      host:
        # Note that the libboost-devel from libintervalxt forces these headers to be
        # compatible with ones used when building libintervalxt.
        - libboost-headers
        - python
        - cppyy
        - cppyythonizations
        - setuptools
        - pytest
        - {{ pin_subpackage("libintervalxt") }}
      run:
        # cppyy dynamically compiles C++ wrappers at runtime, therefore we need C++ headers of boost.
        # Note that the libboost-devel from libintervalxt forces these headers to be
        # compatible with ones used when building libintervalxt.
        - libboost-headers
        - python
        - cppyy
        - cppyythonizations
        - gmpxxyy
        # A subpackage does not see the run_exports of another subpackage:
        # https://github.com/conda/conda-build/issues/3478
        - {{ pin_subpackage("libintervalxt") }}
    test:
      imports:
        - pyintervalxt

about:
  home: https://github.com/flatsurf/intervalxt
  license: GPL-3.0-or-later
  license_family: GPL
  license_file: COPYING
  summary: Interval Exchange Transformations
  description: |
    intervalxt is a C++/Python library which implements algorithms on Interval
    Exchange Transformations (IETs).
    In particular, we implement the Boshernitzan Algorithm and Rauzy Induction
    on IETs. Our principal application is the decomposition of a measured
    foliation into periodic and minimal components. We certify that a component
    is minimal with the Boshernitzan Algorithm or by certifying that the Rauzy
    Induction will be looping infinitely. Note that presently the algorithm is
    probably incomplete; in rare cases no further decomposition of a component
    seems to be possible, nevertheless, our criteria fail to certify minimality
    of the component.
  dev_url: https://github.com/flatsurf/intervalxt

extra:
  recipe-maintainers:
    - saraedum
